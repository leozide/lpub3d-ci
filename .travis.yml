language: cpp
sudo: required
dist: trusty

git:
  depth: 200

branches:
  only:
  - master

cache:
  ccache: true
  directories:
  - ${HOME}/ldraw
  - ${HOME}/Library/ldraw
  - ${LP3D_DIST_DIR_PATH}

env:
  - QT_BASE=59

matrix:
 fast_finish: true
 include:
  - os: linux
    compiler: gcc
    env:
     - BUILD_ARCH170101=true
  - os: linux
    compiler: gcc
    env:
     - BUILD_FEDORA25=true
  - os: linux
    compiler: gcc
    env:
     - BUILD_XENIAL=true
  - os: osx
    compiler: clang
    env:
     - BUILD_MACOS=true
  - os: linux
    compiler: gcc
    env:
     - COMPILE_SOURCE=true
  - os: osx
    compiler: clang
    env:
     - COMPILE_SOURCE=true

before_install:
  # Skip build if the commit message contains [skip travis] or [travis skip]
  - >
      echo "$TRAVIS_COMMIT_MESSAGE"
      | grep -E  '\[(skip travis|travis skip)\]'
      && echo "[skip travis] detected, exiting."
      && exit 0 || true
  # Build package if commit message contains [build pkg]
  - >
      echo "$TRAVIS_COMMIT_MESSAGE"
      | grep -E '\[build pkg.*\]'
      && export LP3D_BUILD_PKG=yes
      && echo "[build pkg] detected." || true
  # Build and deploy package if commit message contains [deploy pkg]
  - >
      echo "$TRAVIS_COMMIT_MESSAGE"
      | grep -E  '\[deploy pkg\]'
      && echo "[deploy pkg] detected."
      && export LP3D_BUILD_PKG=yes
      && export LP3D_DEPLOY_PKG=yes || true

  # Add private qt repositories
  - if [[ "$QT_BASE" = "52" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt521-trusty -y; fi
  - if [[ "$QT_BASE" = "53" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt532-trusty -y; fi
  - if [[ "$QT_BASE" = "54" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt542-trusty -y; fi
  - if [[ "$QT_BASE" = "55" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt551-trusty -y; fi
  - if [[ "$QT_BASE" = "56" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt562-trusty -y; fi
  - if [[ "$QT_BASE" = "57" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt571-trusty -y; fi
  - if [[ "$QT_BASE" = "58" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt58-trusty  -y; fi
  - if [[ "$QT_BASE" = "59" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo add-apt-repository ppa:beineri/opt-qt592-trusty -y; fi
  # Parse the commit message for 3rd party build override
  # As 3rd party items are not expected to change often
  # We cache them to speed up the build. If/when it is necessary
  # to build one of the items, we signa with 1 in the commit message
  # The format is [build pkg 1 1 1] to build all 3rd party itmes.
  # The first position is LDGlite, the second is LDView and the
  # third is LPub3D_Trace (POV-Ray). Alternatively you may choose
  # to build only one of the items in which case the settings would
  # be ...1 0 0 to only build the LDGlite.
  - if [ "$LP3D_BUILD_PKG" = "yes" ]; then
      LP3D_BUILD_3RD=$(echo "$TRAVIS_COMMIT_MESSAGE" | \
      sed -n -e 's/^.*build pkg //p' -e 's/^.*deploy pkg //p' | sed 's/]//g');
      export LP3D_BUILD_LDGLITE=$(echo "$LP3D_BUILD_3RD" | cut -d' ' -f 1);
      export LP3D_BUILD_LDVIEW=$(echo "$LP3D_BUILD_3RD" | cut -d' ' -f 2);
      export LP3D_BUILD_TRACE=$(echo "$LP3D_BUILD_3RD" | cut -d' ' -f 3);
      export LP3D_BUILD_3RD=$LP3D_BUILD_3RD;
    fi
  # Update repository index and download package dependencies/docker-engine if required
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo apt-get update -qq;
      export LP3D_DIST_DIR=lpub3d_linux_3rdparty;
    else
      brew update;
      brew install ccache openexr sdl2 tinyxml gl2ps libtiff libjpeg minizip;
      export PATH="/usr/local/opt/ccache/libexec:$PATH";
      export LP3D_DIST_DIR=lpub3d_macos_3rdparty;
    fi

install:
  # Install qt5 on Linux
  - if [[ "$QT_BASE" = "52" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt52base; source /opt/qt52/bin/qt52-env.sh; fi
  - if [[ "$QT_BASE" = "53" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt53base; source /opt/qt53/bin/qt53-env.sh; fi
  - if [[ "$QT_BASE" = "54" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt54base; source /opt/qt54/bin/qt54-env.sh; fi
  - if [[ "$QT_BASE" = "55" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt55base; source /opt/qt55/bin/qt55-env.sh; fi
  - if [[ "$QT_BASE" = "56" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt56base; source /opt/qt56/bin/qt56-env.sh; fi
  - if [[ "$QT_BASE" = "57" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt57base; source /opt/qt57/bin/qt57-env.sh; fi
  - if [[ "$QT_BASE" = "58" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt58base; source /opt/qt58/bin/qt58-env.sh; fi
  - if [[ "$QT_BASE" = "59" && "$TRAVIS_OS_NAME" = "linux" && "$LP3D_BUILD_PKG" = "" ]]; then sudo apt-get install -qq qt59base; source /opt/qt59/bin/qt59-env.sh; fi
  # Install qt5 on MacOS, clone lpub3d_macos_3rd party repository and download LDraw library archive files
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      if [ "$QT_BASE" = "55" ]; then
        brew install qt55;
        brew link --force qt55;
      else
        brew install qt5;
        brew link --force qt5;
      fi;
      wget http://www.ldraw.org/library/updates/complete.zip -O ../complete.zip && cp -f ../complete.zip mainApp/extras;
      wget http://www.ldraw.org/library/unofficial/ldrawunf.zip -O mainApp/extras/lpub3dldrawunf.zip;
    fi
  # Update docker-engine, docker-compose and get application version strings
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [ "$LP3D_BUILD_PKG" = "yes" ]; then
        curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | sudo apt-key add -;
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable";
        sudo apt-get update -qq;
        sudo apt-get -y install docker-ce;
        docker version;
        export DOCKER_COMPOSE_VERSION=1.18.0-rc2;
        sudo rm /usr/local/bin/docker-compose;
        curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose;
        chmod +x docker-compose;
        sudo mv docker-compose /usr/local/bin;
        docker-compose version;
        ComposePath=builds/linux/docker-compose;
        mkdir -p builds/releases;
        export ReleasesPath=$PWD/builds/releases;
      fi;
    fi
  # Setup 3rd party distribution directory
  - export LP3D_DIST_DIR_PATH=$(cd ../ && echo "$PWD/${LP3D_DIST_DIR}");
    if [ ! -d "$LP3D_DIST_DIR_PATH" ]; then
      mkdir -p $LP3D_DIST_DIR_PATH;
    else
      echo "Using cached 3rd Party repository $LP3D_DIST_DIR_PATH";
    fi
  # Manage 3rd party items cache - deleting a component will trigger a new build.
  - if [ -n "$LP3D_BUILD_3RD" ]; then
      LP3D_LDGLITE=$LP3D_DIST_DIR_PATH/ldglite-1.3;
      LP3D_LDVIEW=$LP3D_DIST_DIR_PATH/ldview-4.3;
      LP3D_LPUB3D_TRACE=$LP3D_DIST_DIR_PATH/lpub3d_trace_cui-3.8;
      if [[ "$LP3D_BUILD_LDGLITE" = "1" && -d $LP3D_LDGLITE ]]; then
        rm -rf $LP3D_LDGLITE && echo "cached $LP3D_LDGLITE deleted";
      fi;
      if [[ "$LP3D_BUILD_LDVIEW" = "1" && -d $LP3D_LDVIEW ]]; then
        rm -rf $LP3D_LDVIEW && echo "cached $LP3D_LDVIEW deleted";
      fi;
      if [[ "$LP3D_BUILD_TRACE" = "1" && -d $LP3D_LPUB3D_TRACE ]]; then
        rm -rf $LP3D_LPUB3D_TRACE && echo "cached $LP3D_LPUB3D_TRACE deleted";
      fi;
    fi

script:
  # Build distributions package (using docker-compose for linux builds) or just compile the code
  - if [ "$LP3D_BUILD_PKG" = "yes" ]; then
      if [ "$TRAVIS_OS_NAME" = "linux" ]; then
        ln -sf "$LP3D_DIST_DIR_PATH" "$ComposePath/$LP3D_DIST_DIR";
        if [ "$BUILD_ARCH170101" = "true" ]; then
          docker-compose -f $ComposePath/docker-compose-cibuild-linux.yml run --rm archlinux_2017.10.01;
        fi;
        if [ "$BUILD_FEDORA25" = "true" ]; then
          docker-compose -f $ComposePath/docker-compose-cibuild-linux.yml run --rm fedora_25;
        fi;
        if [ "$BUILD_XENIAL" = "true" ]; then
          docker-compose -f $ComposePath/docker-compose-cibuild-linux.yml run --rm ubuntu_xenial;
        fi;
        echo " Package Files " && find $ComposePath -type f -not -name "*ocker*";
      fi;
      if [ "$BUILD_MACOS" = "true" ]; then
        ln -sf "$LP3D_DIST_DIR_PATH" "$(cd ../ && echo "$PWD/dmgbuild/${LP3D_DIST_DIR}")";
        chmod +x builds/macx/CreateDmg.sh && ./builds/macx/CreateDmg.sh;
        echo " Package  Files:" && find ../dmgbuild/DMGS -type f;
      fi;
    else
      export LPUB3D="${PWD##*/}"; export WD="$(cd ../ && echo "$PWD")";
      chmod +x builds/utilities/CreateRenderers.sh && ./builds/utilities/CreateRenderers.sh;
      echo " Renderer Files:" && find ${LP3D_DIST_DIR_PATH} -type f;
      qmake -v;
      qmake -r;
      make;
    fi

# Gather up and move build artefacts and logs to releases directory
before_deploy:
  - if [ "$LP3D_BUILD_PKG" = "yes" ]; then
      if [ "$TRAVIS_OS_NAME" = "linux" ]; then
        if [ "$BUILD_ARCH170101" = "true" ]; then
          Df_Pkg=`ls $ComposePath/LPub3D-${LP3D_APP_VERSION_LONG}*.pkg.tar.xz`;
          Uf_Pkg=`ls $ComposePath/LPub3D_UpdateMaster_${LP3D_APP_VERSION}*.pkg.tar.xz`;
          cp -f $Df_Pkg $Uf_Pkg *.log $ReleasesPath;
        fi;
        if [ "$BUILD_FEDORA25" = "true" ]; then
          Df_Rpm=`ls $ComposePath/LPub3D-${LP3D_APP_VERSION_LONG}*.rpm`;
          Uf_Rpm=`ls $ComposePath/LPub3D_UpdateMaster_${LP3D_APP_VERSION}*.rpm`;
          cp -f $Df_Rpm $Uf_Rpm *.log $ReleasesPath;
        fi;
        if [ "$BUILD_XENIAL" = "true" ]; then
          Df_Deb=`ls $ComposePath/LPub3D-${LP3D_APP_VERSION_LONG}*.deb`;
          Uf_Deb=`ls $ComposePath/LPub3D_UpdateMaster_${LP3D_APP_VERSION}*.deb`;
          cp -f $Df_Deb $Uf_Deb *.log $ReleasesPath;
        fi;
      fi;
      if [ "$BUILD_MACOS" = "true" ]; then
        Df_Dmg=`ls ../dmgbuild/DMGS/LPub3D*.dmg`;
        Uf_Dmg=`ls ../dmgbuild/DMGS/LPub3D-UpdateMaster*.dmg`;
        Logs_Dmg=$(find ../dmgbuild -name *.log)
        cp -f $Df_Dmg $Uf_dmg $Logs_Dmg $ReleasesPath;
      fi;
      echo " Release Files:" && find $ReleasesPath -type f;
    fi

deploy:
  provider: releases
  api_key:
    secure: GRl0LOJ8M5ow1qik8t2+tJsqMDo53v/TRfxprWg5C+3DR3ny/CgR5mODMtpR4LgSyMeD5yhGovxHAbzgUyutne9PT0BagI8zdt/ZMqcLnvPQyzJlhfy3t2TVcJRoVXcoUUF0ZJHrpr9WD8C7xnjMp7w/j+HThQuX+8CD3gCwZhYkDRuNgtJY/PT+nwITjC4WJuF0xxYOyLJROebQZ1LJ24HY0zVtg+JJZPslkQHgoBg/ozO8JNXgYaYe3VgcyQSnUMqE/SjMBGYMR9RlNwYXCJLeYHiY3fej33z7UPZOH/kPQ8RhKpJi9qqOTtYj38dTxmpiJjOJ4SyeKXvsyymc5ekwSdlJe6rVWKKAXFMegH/4i3Nk8HKmfxMPLklprusFEMQo2CdA5UeNRuWJ/HfDpywbQwFLC6ThNZcS6wqOqf2Rzy6QRNFWlH9eJoiSMyQRVTFGwQ3bf2MXXJSloFuxRpGYoejWt36O+rNZnTR6+Xz1r2KyaaFizCGen082klzmfdoCl0mh+m9Jix7ypzgNBKISFI5DTbjr6Qt+D5dVdp5PWGBAbhTd6JtcG64P9fDUWq5X9ypFj6Jb1626sHFlYQKCSX+lEpjbd4UTSbTxO35NMTO1g90xKMJeIpvsCwm9DcWl+jGmt9cwSHxTQuWkeEaUcoywYvA4kTjIpDuIaR8=
  file_glob: true
  file: $ReleasesPath/*
  overwrite: true
  skip_cleanup: true
  on:
    repo: trevorsandy/lpub3d-ci
    condition: $LP3D_DEPLOY_PKG = yes

notifications:
  email:
    on_success: never
    on_failure: always
