#!/bin/bash
#
# This commit-msg hook updates the LPub3D version information when
# [build pkg*] or [deploy pkg*] is detected in the commit message.
#
## Automatically generate git revision info
##
## Setup
## '>' denotes a new line
## cd to your git repository and type:
## $ cat << pbEOF >.git/hooks/pre-commit
## > #!/bin/sh
## > ./builds/utilities/hooks/pre-commit                                                     # location of pre-commit script in your source repository
## > pbEOF
## $
##
## Ignore Increment:
##   In instances where you do NOT want the version info incremented,
##   add the environment variable doIncrement=no to your git call.
##   e.g. $ env doIncrement=no git commit -m "Message - 00 [ci skip].
##   This is useful on the first commit after you change the
##   major/minor/patch version number for example.
##
exec 1>&2
increment_version=${doIncrement:-yes}                                                        # to disable or run from command line, set default to 'no'
commitmsg=".git/COMMIT_EDITMSG"
cat "$commitmsg" | grep -qE '\[(build|deploy) pkg.*\]' && update_config_files=yes || true    # trigger if [build pkg*] or [deploy pkg*] exist in commit message
if test x"$update_config_files" = x"yes"; then

  tag_long=`git describe --tags --long`
  tag_short=`git describe --tags --abbrev=0`
  commit_count=`git rev-list HEAD --count`
  sha_hash_short=`git rev-parse --short HEAD`

  valid_commit="yes"
  if test x"`git diff HEAD --name-only`" = x""; then valid_commit="no"; fi

  tmp1=${tag_long#*-}                                    # remove everything before and including "-"
  revision=${tmp1%-*}                                    # remove everything after and including "-"
  tmp2=${tag_short//./" "}                               # replace . with " "
  version_=${tmp2/v/}                                    # replace v with ""
  suffix=${tmp2#*_}                                      # remove everything before and including "_" if it exist
  if test -n "$suffix"; then version_=${version_%_*}; fi # remove everything after and including "_"
  read major minor patch <<< ${version_}

  echo "0. Incrementing Git version info..."
  echo "   To disable, use: 'doIncrement=FALSE git commit -m \"Commit Message\"'"
  echo "   Old_revision...........$revision"
  echo "   Old_build (count)......$commit_count"
  echo "   Increment version......$increment_version"
  if test x"$increment_version" = x"yes" && test x"$valid_commit" = x"yes"; then ((revision++)); ((commit_count++)); fi

  working_dir=$PWD/mainApp; export OBS=true
  chmod +x builds/utilities/update-config-files.sh
  ./builds/utilities/update-config-files.sh ${working_dir} $major $minor $patch $revision $commit_count $sha_hash_short $suffix

  git add builds/utilities/version.info
  git add mainApp/docs/lpub3d${major}${minor}.1
  git add mainApp/docs/README.txt
  git add mainApp/lpub3d.desktop

  git add builds/linux/obs/alldeps/PKGBUILD
  git add builds/linux/obs/alldeps/lpub3d-ci.spec
  git add builds/linux/obs/alldeps/debian/changelog
  git add builds/linux/obs/alldeps/debian/lpub3d-ci.dsc
fi

