#!/bin/bash
#
# Travis build [script] procedures
#
#  Trevor SANDY <trevor.sandy@gmail.com>
#  Last Update: January 12, 2018
#  Copyright (c) 2017 - 2018 by Trevor SANDY
#
cd $LP3D_BUILD_FOLDER

# Build distributions package (using docker-compose for linux builds) or just compile the code
if [ "$LP3D_DEPLOY_PACKAGES" = "" ]; then
  if [ "$LP3D_BUILD_PKG" = "yes" ]; then
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [[ "$LP3D_BUILD_ARCH2017" = "true" || "$LP3D_BUILD_FEDORA25" = "true" || "$LP3D_BUILD_XENIAL" = "true" ]]; then
        if [ ! -d "${LP3D_COMPOSE_DIR}/${LP3D_DIST_DIR}" ]; then
          ln -sf "$LP3D_DIST_DIR_PATH" "${LP3D_COMPOSE_DIR}/${LP3D_DIST_DIR}" &&
          if test -d "${LP3D_COMPOSE_DIR}/${LP3D_DIST_DIR}"; then echo "$LP3D_DIST_DIR_PATH linked to ${LP3D_COMPOSE_DIR}/${LP3D_DIST_DIR}"; fi;
        else
          echo "Using cached 3rd Party repository ${LP3D_COMPOSE_DIR}/${LP3D_DIST_DIR}";
        fi;
      fi;
      if [ "$LP3D_BUILD_ARCH2017" = "true" ]; then
        docker-compose -f $LP3D_COMPOSE_DIR/docker-compose-cibuild-linux.yml run --rm archlinux_2017;
      fi;
      if [ "$LP3D_BUILD_FEDORA25" = "true" ]; then
        docker-compose -f $LP3D_COMPOSE_DIR/docker-compose-cibuild-linux.yml run --rm fedora_25;
      fi;
      if [ "$LP3D_BUILD_XENIAL" = "true" ]; then
        docker-compose -f $LP3D_COMPOSE_DIR/docker-compose-cibuild-linux.yml run --rm ubuntu_xenial;
      fi;
      echo "Package Files " && find $LP3D_COMPOSE_DIR -type f -not -name "*ocker*";
    fi;
    if [ "$LP3D_BUILD_MACOS" = "true" ]; then
      if [ ! -d "${DmgBuildPath}/${LP3D_DIST_DIR}" ]; then
        ln -sf "$LP3D_DIST_DIR_PATH" "${DmgBuildPath}/${LP3D_DIST_DIR}" &&
        if test -d "${DmgBuildPath}/${LP3D_DIST_DIR}"; then echo "$LP3D_DIST_DIR_PATH linked to ${DmgBuildPath}/${LP3D_DIST_DIR}"; fi;
      else
        echo "Using cached 3rd Party repository ${DmgBuildPath}/${LP3D_DIST_DIR}";
      fi;
      chmod +x builds/macx/CreateDmg.sh && ./builds/macx/CreateDmg.sh;
      echo "Package Files:" && find $DmgBuildPath/DMGS -type f;
    fi;
  elif [[ "$LP3D_COMPILE_SOURCE" = "true" || "$LP3D_BUILD_APPIMAGE" = "true" ]]; then
    export LPUB3D=${PWD##*/}; export WD=$(cd ../ && echo $PWD);
    if [ ! -d "${WD}/${LP3D_DIST_DIR}" ]; then
      ln -sf "$LP3D_DIST_DIR_PATH" "${WD}/${LP3D_DIST_DIR}" &&
      if test -d "${WD}/${LP3D_DIST_DIR}"; then echo "$LP3D_DIST_DIR_PATH linked to ${WD}/${LP3D_DIST_DIR}"; fi;
    else
      echo "Using cached 3rd Party repository ${WD}/${LP3D_DIST_DIR}";
    fi;
    chmod +x builds/utilities/CreateRenderers.sh && ./builds/utilities/CreateRenderers.sh;
    echo "Renderer Files:" && find ${LP3D_DIST_DIR_PATH} -type f && echo;
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      export INSTALL_3RD_PARTY=yes;
    fi;
    qmake -v;
    if [[ "$LP3D_BUILD_PKG" = "yes" && "$TRAVIS_OS_NAME" = "linux" ]]; then
      qmake -makefile -nocache QMAKE_STRIP=: CONFIG+=release CONFIG-=debug_and_release CONFIG+=api;
      make -j$(nproc);
      make INSTALL_ROOT=$AppImageBuildPath -j$(nproc) install;
      echo "AppImage Input Files:" && find $AppImageBuildPath -type f && echo;
      [ ! -e linuxdeployqt-continuous-x86_64.AppImage ] && \
      wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage";
      chmod a+x linuxdeployqt-continuous-x86_64.AppImage;
      renderers=$(find $AppImageBuildPath/opt -type f);
      for r in $renderers; do executables="$executables -executable=$r"; done;
      unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH
      export VERSION="$LP3D_VER_SHA_HASH"    # git-SHA - linuxdeployqt uses this for naming the file
      ./linuxdeployqt-continuous-x86_64.AppImage $AppImageBuildPath/usr/share/applications/*.desktop $executables -bundle-non-qt-libs -verbose=2
      ./linuxdeployqt-continuous-x86_64.AppImage $AppImageBuildPath/usr/share/applications/*.desktop -appimage -verbose=2
      echo "AppImage Dependencies:" && find $AppImageBuildPath -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq && echo;
    else
      qmake -r
      make -j$(nproc);
    fi
  fi;
fi
