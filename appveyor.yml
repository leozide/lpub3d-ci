version: 'LPub3D-AV-{build}'

clone_folder: c:\projects\lpub3d-ci
# skip automatic cloning because we want restore cached items in the clone directory first
clone_script: echo skip

# we're caching 3rd party apps (image renderers), and qt5 for x86_64
# we also cache previously compiled items to speed up build time when there is
# minimal change to the source.
cache:
 - 'C:\projects\$(lp3d_librepo)'
  # - 'mainApp\Makefile'
  # - 'mainApp\Makefile.Release'
  # - 'mainApp\LPub3D10_resource.rc'
  # - 'mainApp\object_script.LPub3D10.Release'
  # - 'mainApp\Makefile.Debug'
  # - 'mainApp\LPub3Dd10_resource.rc'
  # - 'mainApp\object_script.LPub3Dd10.Debug'
  # - 'mainApp\$(configuration)'
  # - 'ldrawini\Makefile'
  # - 'ldrawini\Makefile.Release'
  # - 'ldrawini\LDrawIni161_resource.rc'
  # - 'ldrawini\Makefile.Debug'
  # - 'ldrawini\LDrawInid161_resource.rc'
  # - 'ldrawini\$(configuration)'
  # - 'quazip\Makefile'
  # - 'quazip\Makefile.Release'
  # - 'quazip\QuaZIP07_resource.rc'
  # - 'quazip\object_script.QuaZIP07.Release'
  # - 'quazip\Makefile.Debug'
  # - 'quazip\QuaZIPd07_resource.rc'
  # - 'quazip\object_script.QuaZIPd07.Debug'
  # - 'quazip\$(configuration)'

branches:
  only:
   - master

platform: x64

configuration: release

matrix:
  fast_finish: true

# we're building both x86 and x86_64 target architectures
# we must also setup the x86_64 Qt5 build environment for MinGW
# the matrix block below must always play the x86_64 build last
# in order to preserve the artifact pakcaging logic described later
environment:
  lp3d_build: appveyor_ci
  lp3d_job2arch: x86_64
  lp3d_packagepath: builds\windows\$(configuration)
  lp3d_job1package: LPub3D-Job1-AV-$(APPVEYOR_BUILD_NUMBER).zip
  lp3d_qtlibs: mingw-w64-x86_64-qt5-5.9.1-1-any.pkg.tar.xz
  lp3d_iculibs: mingw-w64-x86_64-icu-58.2-2-any.pkg.tar.xz
  lp3d_librepo: lpub3d_windows_3rdparty
  lp3d_librepodir: /c/projects/$(lp3d_librepo)
  matrix:
  - lp3d_target_arch: x86
  - lp3d_target_arch: x86_64

# generte remote-desktop credentials - useful for debugging
# clear the cache if specified
# set the make parameters and qt library path
# process [build pkg] commit message request
# process [deploy pkg] commit message request
init:
 - ps: write-host "Building $env:lp3d_target_arch architecture..."
 - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[clear avcache]"))
      {
        write-host "[clear avcache] detected."

        $apiUrl = 'https://ci.appveyor.com/api'
        $token = 'h2o1p08rkt8jgen5f0ke'
        $headers = @{
          "Authorization" = "Bearer $token"
          "Content-type" = "application/json"
        }

        $accountName = $env:APPVEYOR_ACCOUNT_NAME
        $projectSlug = $env:APPVEYOR_PROJECT_SLUG

        $env:APPVEYOR_CACHE_SKIP_RESTORE  = "true"
        Invoke-RestMethod -Uri "$apiUrl/projects/$accountName/$projectSlug/buildcache" -Headers $headers -Method DELETE
        $env:APPVEYOR_CACHE_SKIP_SAVE = "true"

        Write-Output "Build cache cleared."
      }
 - ps: |
      $env:lp3d_qtpath = "C:\Qt\5.9.1\mingw53_32\bin;C:\Qt\Tools\mingw530_32\bin"
      $env:lp3d_makeargs = "CONFIG+=$env:lp3d_build CONFIG+=$env:configuration CONFIG+=stagewindistcontent"
      If ($env:lp3d_target_arch -eq "x86_64") {
        $env:lp3d_qtpath = C:\msys64\MINGW64\bin;C:\msys64\usr\bin
        $env:lp3d_makeargs = "CONFIG+=appveyor_qt_mingw64 $env:lp3d_makeargs"
      }
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[build pkg]")) {
        write-host "[build pkg] detected."
        If ($env:lp3d_target_arch -eq $env:lp3d_job2arch) {
          $env:lp3d_archive_job1_artefact = $false
        } else {
          $env:lp3d_archive_job1_artefact = $true
        }
        $env:lp3d_restore_job1_artefact = -NOT $env:lp3d_archive_job1_artefact
        $env:lp3d_archive_job2_artefact = -NOT $env:lp3d_archive_job1_artefact
      }
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[deploy pkg]")) {
        write-host "[deploy pkg] detected."
        If ($env:lp3d_target_arch -eq $env:lp3d_job2arch) {
          $env:lp3d_deploy_pkg = $true
        }
      }
 - cmd: SET PATH=%lp3d_qtpath%;%PATH% &echo PATH appended with %lp3d_qtpath%
 #- ps: Get-ChildItem Env:APPVEYOR* | Sort-Object name
 - ps: Get-ChildItem Env:lp3d_* | Sort-Object name

# This is where we install Qt5 for x86_64 builds along with ICU v58. The source for these items are cached but if not then they are
# downloded. After building out the dev env, we proceed to fetch the commit that fired off the AppVeyor build.
# We don't use git clone because the 'clone_directory' is not empty (restored cached components were added in previous steps) - so the
# git clone command will fail. Instead we use fetch and checkout to pretty much replicate the same behaviour as the default git clone.
# This includes setting the clone depth, and fetching the last commit and previous tags
install:
 - cmd: git init %APPVEYOR_BUILD_FOLDER%
 - cmd: cd %APPVEYOR_BUILD_FOLDER%
 - cmd: git remote add origin https://github.com/%APPVEYOR_REPO_NAME%.git
 - cmd: git fetch -qfup --depth=200 origin +%APPVEYOR_REPO_BRANCH% +refs/tags/*:refs/tags/*
 - cmd: git checkout -qf %APPVEYOR_REPO_COMMIT%
 - cmd: bash -lc "if ! test -d ${lp3d_librepodir}; then git clone https://github.com/trevorsandy/${lp3d_librepo}.git ${lp3d_librepodir} && echo ${lp3d_librepo} cloned; fi"
 - cmd: if %lp3d_target_arch%==x86_64 bash -lc "cd ${lp3d_librepodir}/qt-5.9.1-1-release; pacman -U --needed --noconfirm ${lp3d_qtlibs} ${lp3d_iculibs}"

# this script is a work-around to combine both the x86 and x86_64 build targets into a single artifact. we then run
# the NSIS packaging script against the archive creating a single installer for both architectures.
# this script is only run on the 2nd of the two jobs (job2).
before_build:
 - ps: |
      If ($env:lp3d_restore_job1_artefact -eq $true)
      {
        Write-Output "Restoring $env:lp3d_packagepath build folder from artifact..."

        $apiUrl = 'https://ci.appveyor.com/api'
        $token = 'h2o1p08rkt8jgen5f0ke'
        $headers = @{
          "Authorization" = "Bearer $token"
          "Content-type" = "application/json"
        }

        $accountName = $env:APPVEYOR_ACCOUNT_NAME
        $projectSlug = $env:APPVEYOR_PROJECT_SLUG

        # using clone folder
        $downloadLocation = $env:APPVEYOR_BUILD_FOLDER
        Write-Output "Var downloadLocation     = $downloadLocation"

        # get project with last build details
        $project = Invoke-RestMethod -Method Get -Uri "$apiUrl/projects/$accountName/$projectSlug" -Headers $headers

        # get this job id
        $jobId = $project.build.jobs[0].jobId

        # get job artifacts
        $artifacts = Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts" -Headers $headers

        # $artifactFileName = 'MyWebApp.zip'
        $artifactFileName = $artifacts[0].fileName
        Write-Output "Var artifactFileName     = $artifactFileName"

        # artifact will be downloaded as
        $localArtifactArchive = "$downloadLocation\$artifactFileName"
        Write-Output "Var localArtifactArchive = $localArtifactArchive"

        # download artifact
        Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts/$artifactFileName" `
        -OutFile $localArtifactArchive -Headers @{ "Authorization" = "Bearer $token" }

        # extract artifact
        if (-not (Test-Path $localArtifactArchive)) {
          Write-Output "Error artifact $localArtifactArchive not found"
        } else {
          Write-Output "Extracting artifact $localArtifactArchive ..."
          & 7z.exe x $localArtifactArchive "-o$downloadLocation" | Select-String -Pattern '(^Extracting)|(^Everything)' -CaseSensitive
          $CheckArtifactDir = $downloadLocation+"\builds\windows\"+$env:Configuration
          & Write-Output "Var CheckArtifactDir     = $CheckArtifactDir"
          if (-not (Test-Path $CheckArtifactDir)) {
            Write-Output "Error expanding $localArtifactArchive, $CheckArtifactDir not found"
          } else {
            Write-Output "Build folder $env:lp3d_packagepath artifact restored"
          }
        }
      }

# regular make stuff here. CONFIG+=stagewindistcontent us used by qmake to
# generate the install Makefile logic which stages the distro files so
# this flat and make install must be run to complete the build process
build_script:
 - cmd: qmake -v
 - cmd: qmake %lp3d_makeargs%
 - cmd: mingw32-make
 - cmd: mingw32-make install

# Vars used to construct artifacts
after_build:
 - ps: |
      $Sv = git describe --tags --long
      $Sc = git rev-list HEAD --count
      $env:LP3D_AV_VERSION =($Sv.substring(0,$Sv.lastIndexOf('-'))+"."+$Sc).replace("v","").replace("-",".")
      $env:LP3D_AV_PACKAGE = "LPub3D-Any-$env:LP3D_AV_VERSION"
      $env:LP3D_AV_TARGET = "builds\windows\$env:Configuration\$env:LP3D_AV_PACKAGE"
      $env:LP3D_AV_DOWNLOAD_TARGET = "$env:LP3D_AV_TARGET\LPub3D_Download"
      $env:LP3D_AV_UPDATE_TARGET = "$env:LP3D_AV_TARGET\LPub3D_Update"
      Get-ChildItem Env:LP3D_AV_* | Sort-Object name
 - ps: If ($env:lp3d_archive_job1_artefact -eq $true) {7z a $env:lp3d_job1package $env:lp3d_packagepath | Select-String -Pattern '(^Creating)|(^Everything)' -CaseSensitive; Push-AppveyorArtifact $env:lp3d_job1package}
 - ps: If ($env:lp3d_archive_job2_artefact -eq $true) {cmd.exe /c builds\windows\CreateExe.bat}
 - ps: If ($env:lp3d_archive_job2_artefact -eq $true) {$root = Resolve-Path .\$env:LP3D_AV_DOWNLOAD_TARGET; [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName LPub3D-download-package }}
 - ps: If ($env:lp3d_archive_job2_artefact -eq $true) {$root = Resolve-Path .\$env:LP3D_AV_UPDATE_TARGET;   [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName LPub3D-update-package }}

# for the moment we only deploy to github. I'll setup a sourceforge deployment scheme
# at some point going forward
deploy:
 - provider: GitHub
   description: ''
   auth_token:
     secure: rnf4qpF81ISjm8q13OgkAaoKZReXpjODhU9fbGFMhMydHrda1ezLubGXRU9OKGu4
   artifact: LPub3D-download-package
   prerelease: true
   force_update: true
   on:
    branch: master
    lp3d_deploy_pkg: true
