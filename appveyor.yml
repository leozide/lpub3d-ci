# Build and check LPub3D x86 and x86_64 architectures unsing Qt/MinGW platform
version: 'LPub3D-AV-2.1.0.{build}'

clone_folder: c:\projects\lpub3d-ci

# skip automatic cloning because we want to restore cached items in the clone directory first
clone_script: echo skip

# we're caching:
# LDraw parts library - used for testing renderers
# Qt5 for MinGW i386 and x86_64 in lp3d_librepo - enable building MinGW and MSBild in same job
# Built renderers
cache:
 - '$(APPVEYOR_BUILD_FOLDER)\LDraw'
 - '$(APPVEYOR_BUILD_FOLDER)\${lp3d_librepodir}'
 - '$(APPVEYOR_BUILD_FOLDER)\$(LP3D_DIST_DIR)'

shallow_clone: true

image: Visual Studio 2017

branches:
  only:
   - master

configuration: release

matrix:
  fast_finish: true

environment:
  LP3D_PACKAGE: LPub3D
  LP3D_DIST_DIR: lpub3d_windows_3rdparty
  LP3D_DIST_DIR_PATH: $(APPVEYOR_BUILD_FOLDER)\$(LP3D_DIST_DIR)
  LP3D_QT32_MSYS2: C:\msys64\MINGW32\bin
  LP3D_QT64_MSYS2: C:\msys64\MINGW64\bin
  LP3D_PACKAGE_PATH: builds\windows\$(configuration)
  lp3d_qt32libs: mingw-w64-i686-qt5-5.9.2-2-any.pkg.tar.xz
  lp3d_qt64libs: mingw-w64-x86_64-qt5-5.9.2-2-any.pkg.tar.xz
  lp3d_librepo: lpub3d_mingw-Qt5_libs
  lp3d_librepodir: /c/projects/$(APPVEYOR_PROJECT_NAME)/$(lp3d_librepo)

init:
 - ps: write-host "Building ${env:LP3D_PACKAGE} x86 and x86_64 architectures..."
 - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[build pkg]")) {
        write-host "[build pkg] detected."
        $env:LP3D_BUILD_PKG = "yes"
      }
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[deploy pkg]")) {
        write-host "[deploy pkg] detected."
        $env:LP3D_BUILD_PKG = "yes"
        $env:LP3D_DEPLOY_PKG = $true
      }
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[clear avcache]")) {
        write-host "[clear avcache] detected."

        $apiUrl = 'https://ci.appveyor.com/api'
        $token = 'h2o1p08rkt8jgen5f0ke'
        $headers = @{
          "Authorization" = "Bearer $token"
          "Content-type" = "application/json"
        }

        $accountName = $env:APPVEYOR_ACCOUNT_NAME
        $projectSlug = $env:APPVEYOR_PROJECT_SLUG

        $env:APPVEYOR_CACHE_SKIP_RESTORE  = "true"
        Invoke-RestMethod -Uri "$apiUrl/projects/$accountName/$projectSlug/buildcache" -Headers $headers -Method DELETE

        Write-Output "Build cache cleared."
      }
 - ps: Get-ChildItem Env:LP3D_* | Sort-Object name

# This is where we install Qt5 for x86_64 builds along with ICU v58. The source for these items are cached but if not then they are
# downloded. After setting up these items, we proceed to fetch the commit that triggered the AppVeyor build.
# We don't use git clone because the 'clone_directory' is not empty (restored cached components were added in previous steps) - so the
# git clone command will fail. Instead we use fetch and checkout to pretty much replicate the same behaviour as the default git clone.
# This includes setting the clone depth, and fetching the last commit and previous tags
install:
 - cmd: git init %APPVEYOR_BUILD_FOLDER%
 - cmd: cd %APPVEYOR_BUILD_FOLDER%
 - cmd: git remote add origin https://github.com/%APPVEYOR_REPO_NAME%.git
 - cmd: git fetch -qfup --depth=200 origin +%APPVEYOR_REPO_BRANCH% +refs/tags/*:refs/tags/*
 - cmd: git checkout -qf %APPVEYOR_REPO_COMMIT%
 - cmd: bash -lc "if ! test -d ${lp3d_librepodir}; then curl -sL -o ${lp3d_librepo}.tar.gz https://github.com/trevorsandy/${lp3d_librepo}/archive/master.tar.gz; fi"
 - cmd: bash -lc "if ! test -d ${lp3d_librepodir} && test -f ${lp3d_librepo}.tar.gz; then mkdir -p ${lp3d_librepodir} && tar -xzf ${lp3d_librepo}.tar.gz -C ${lp3d_librepodir} --strip-components=1; fi"
 - cmd: bash -lc "if ! test -d ${lp3d_librepodir}; then echo repository ${lp3d_librepodir} not found; else echo library repository available at ${lp3d_librepodir}; fi"
 - cmd: C:\msys64\usr\bin\bash -lc "cd ${lp3d_librepodir}/qt-5.9.2-2-release; pacman -U --needed --noconfirm ${lp3d_qt32libs} ${lp3d_qt64libs}"

build_script:
 - ps: |
      write-host "  Distribution directory..[$env:LP3D_PACKAGE_PATH]"
      write-host "  Working Directory.......[$PWD]"
      If ($env:LP3D_BUILD_PKG -eq "yes") {
        cmd.exe /c builds\windows\AutoBuild.cmd -all -3rd -ins -chk 2`>`&1
        $env:LP3D_ARTEFACT_ITEM_COUNT = (Get-ChildItem -Path $env:LP3D_PACKAGE_PATH -Recurse).count
        write-host "`n  Artifact count....[$env:LP3D_ARTEFACT_ITEM_COUNT]"
      } Else {
        cmd.exe /c builds\windows\AutoBuild.cmd -all -3rd -chk 2`>`&1
      }

test: off

after_build:
 - ps: |
      If (($env:LP3D_BUILD_PKG -eq "yes") -and ([int]$env:LP3D_ARTEFACT_ITEM_COUNT -gt 5)) {
        cmd.exe /c builds\windows\CreateExePkg.cmd 2`>`&1
        $Sv = git describe --tags --long
        $Sc = git rev-list HEAD --count
        $Sd = Get-Date -format yyyyMMdd
        $env:LP3D_BLD_VERSION =($Sv.substring(0,$Sv.lastIndexOf('-'))+"."+$Sc+"_"+$Sd).replace("v","").replace("-",".")
        $env:LP3D_BLD_PACKAGE = "${env:LP3D_PACKAGE}-Any-${env:LP3D_BLD_VERSION}"
        $env:LP3D_BLD_TARGET = "builds\windows\${env:Configuration}\{$env:LP3D_BLD_PACKAGE}"
        $env:LP3D_BLD_DOWNLOAD_TARGET = "{$env:LP3D_BLD_TARGET}\${env:LP3D_PACKAGE}_Download"
        $env:LP3D_BLD_UPDATE_TARGET = "${env:LP3D_BLD_TARGET}\${env:LP3D_PACKAGE}_Update"
        Get-ChildItem Env:LP3D_BLD_* | Sort-Object name
        $root = Resolve-Path .\${env:LP3D_BLD_DOWNLOAD_TARGET}; [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName ${env:LP3D_PACKAGE}-download-package }
        $root = Resolve-Path .\${env:LP3D_BLD_UPDATE_TARGET};   [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName ${env:LP3D_PACKAGE}-update-package }
      }

deploy:
 - provider: GitHub
   repository: trevorsandy/lpub3d-ci
   description: '$(LP3D_PACKAGE) - An LDraw™ editor for LEGO® style digital building instructions.'
   auth_token:
     secure: rnf4qpF81ISjm8q13OgkAaoKZReXpjODhU9fbGFMhMydHrda1ezLubGXRU9OKGu4
   release: $(LP3D_BLD_PACKAGE)
   artifact: $(LP3D_PACKAGE)-download-package
   prerelease: true
   force_update: true
   on:
    branch: master
    lp3d_deploy_pkg: true
